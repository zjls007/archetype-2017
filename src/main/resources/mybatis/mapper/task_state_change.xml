<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.dao.TaskStateChangeDAO">

    <resultMap id="BaseResultMap" type="com.cy.entity.TaskStateChange">
        <id column="id" property="id" />
        <result column="task_id" property="taskId" />
        <result column="state" property="state" />
        <result column="operate_user_id" property="operateUserId" />
        <result column="create_time" property="createTime" />
    </resultMap>

    <resultMap id="BaseResultMapAS" type="com.cy.entity.TaskStateChange">
        <id column="tsc_id" property="id" />
        <result column="tsc_task_id" property="taskId" />
        <result column="tsc_state" property="state" />
        <result column="tsc_operate_user_id" property="operateUserId" />
        <result column="tsc_create_time" property="createTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, task_id, state, operate_user_id, create_time
    </sql>

    <sql id="Base_Alias_Column_List">
        tsc.id, tsc.task_id, tsc.state, tsc.operate_user_id, tsc.create_time
    </sql>

    <sql id="Base_Alias_Column_List_AS">
        tsc.id AS tsc_id, tsc.task_id AS tsc_task_id, tsc.state AS tsc_state, tsc.operate_user_id AS tsc_operate_user_id, tsc.create_time AS tsc_create_time
    </sql>

    <insert id="insert" parameterType="com.cy.entity.TaskStateChange" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO task_state_change
        (task_id, state, operate_user_id, create_time)
        VALUES
        (#{taskId}, #{state}, #{operateUserId}, now())
    </insert>

    <insert id="batchInsert" parameterType="com.cy.entity.TaskStateChange">
        INSERT INTO task_state_change
        (task_id, state, operate_user_id, create_time)
        VALUES
        <foreach collection="list" item="item" separator=",">
           (#{item.taskId}, #{item.state}, #{item.operateUserId}, now())
        </foreach>
    </insert>

    <delete id="deleteById">
        DELETE FROM task_state_change WHERE id = #{id}
    </delete>

    <delete id="deleteByTaskId">
        DELETE FROM task_state_change WHERE task_id = #{id}
    </delete>

    <delete id="batchDelete">
        DELETE FROM task_state_change WHERE id IN
        <foreach collection="list" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </delete>

    <update id="updateByIdSelective">
        UPDATE task_state_change
        <set>
            <if test="taskId != null" >
                task_id = #{taskId},
            </if>
            <if test="state != null" >
                state = #{state},
            </if>
            <if test="operateUserId != null" >
                operate_user_id = #{operateUserId},
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="updateById">
        UPDATE task_state_change
        <set>
            task_id = #{taskId},
            state = #{state},
            operate_user_id = #{operateUserId},
        </set>
        WHERE id = #{id}
    </update>

    <select id="getById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM task_state_change WHERE id = #{id}
    </select>

    <select id="getByIdList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM task_state_change WHERE id IN
        <foreach collection="list" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

    <select id="list" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM task_state_change
        <where>
            <if test="id != null" >
                AND id = #{id}
            </if>
            <if test="taskId != null" >
                AND task_id = #{taskId}
            </if>
            <if test="state != null and state != ''" >
                AND state = #{state}
            </if>
            <if test="operateUserId != null" >
                AND operate_user_id = #{operateUserId}
            </if>
            <if test="createTime != null" >
                AND create_time = #{createTime}
            </if>
        </where>
    </select>

    <select id="listByTaskId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM task_state_change
        WHERE task_id = #{taskId}
    </select>

</mapper>

