<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name>archetype-2017</display-name>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>WEB-INF/config/spring-application-*.xml</param-value>
  </context-param>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <!-- 在普通类中获取request： HttpServletRequest request =  ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest()-->
    <listener-class>org.springframework.web.context.request.RequestContextListener </listener-class>
  </listener>

  <!-- 关闭spring session 使用redis功能 -->
  <filter>
    <filter-name>springSessionRepositoryFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSessionRepositoryFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>


  <!-- filter-name的名称要和spring-application-shiro.xml中id对应 -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
  <!-- requests.  Usually this filter mapping is defined first (before all others) to -->
  <!-- ensure that Shiro works in subsequent filters in the filter chain:             -->
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 设置编码UTF-8 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- <input type="hidden" name="_method" value="put|delete" /> 支持restful的扩展请求 -->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    <init-param>
      <param-name>methodParam</param-name>
      <param-value>_method_</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>servletRequestWrapperFilter</filter-name>
    <filter-class>com.cy.common.filter.ServletRequestWrapperFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>servletRequestWrapperFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet>
    <servlet-name>archetypeAdmin</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/config/spring-servlet-admin.xml</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>archetypeAdmin</servlet-name>
    <url-pattern>/admin/*</url-pattern>
    <!--
      http://blog.csdn.net/robinjwong/article/details/39619465
     url-pattern匹配规则
        匹配规则有三种：
        精确匹配 —— 如/foo.htm，只会匹配foo.htm这个URL
        路径匹配 —— 如/foo/*，会匹配以foo为前缀的URL
        后缀匹配 —— 如*.htm，会匹配所有以.htm为后缀的URL
        <url-pattern>的其他写法，如/foo/ ，/*.htm ，*/foo 都是不对的。

        /        ——  "/" 的设置将会将当前指定的 servlet 设为web应用的默认servlet，原来web容器的默认servlet将被覆盖。

    Servlet的匹配原则

      Servlet的匹配规则在prg.apache.tomcat.util.http.mapper.Mapper.internalMapWrapper中定义。
      对Servlet的匹配来说，如果同时定义了多个<url-pattern>,那么到底匹配哪个Servlet？这个匹配顺序是：
      首先精确匹配，如定义了两个Servlet，Servlet1为/foo.htm，Servlet2是/*，请求URL为http://localhost/foo.htm，那么只有Servlet1匹配成功；
      如果精确匹配不成功，那么会使用第二个原则“最长路径匹配”，如Servlet1为/foo/*，Servlet2为/*，这时请求的URL为http://localhost/foo/foo.htm，那么Servlet1匹配成功；
      最后根据后缀进行匹配；
      但是一次请求只会成功匹配到一个Servlet；

      误区1：
          springmvc DispatcherServlet url-pattern 很容易被新手误配为 /* 导致找不到jsp页面
          分析：/* 为路径匹配，已经能匹配到任意路径了， 而jsp的 url-pattern 为 *.jsp（在tomcat的conf/web.xml中能找到）为后缀匹配
          根据原则 路径匹配优先于后缀匹配，所以最终要跳转的页面如 index.jsp 也会重新进入 springmvc 的 DispatcherServlet 中导致最终永远不会找到jsp页面

      误区2：
         springmvc DispatcherServlet url-pattern 官方默认推荐配置为 /
         而使用/会导致覆盖掉tomcat默认的servlet(在tomcat的conf/web.xml中能找到)
         而默认的servlet是有实现去找静态文件的功能的，所以导致这样的配置是找不到静态文件的
         官方解决方案:
              使用 <mvc:default-servlet-handler/> 解决
    -->
  </servlet-mapping>

  <servlet>
    <servlet-name>archetypeFront</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/config/spring-servlet-front.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>archetypeFront</servlet-name>
    <url-pattern>/front/*</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>admin/login</welcome-file>
  </welcome-file-list>

  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
</web-app>